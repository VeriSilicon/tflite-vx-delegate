diff --git a/tensorflow/lite/CMakeLists.txt b/tensorflow/lite/CMakeLists.txt
index f5cc9b97924..cbd95c0ef32 100644
--- a/tensorflow/lite/CMakeLists.txt
+++ b/tensorflow/lite/CMakeLists.txt
@@ -61,12 +61,13 @@ set(CMAKE_PREFIX_PATH
 include(CMakeDependentOption)
 option(TFLITE_ENABLE_RUY "Enable experimental RUY integration" OFF)
 option(TFLITE_ENABLE_RESOURCE "Enable experimental support for resources" ON)
-option(TFLITE_ENABLE_NNAPI "Enable NNAPI (Android only)." ON)
-cmake_dependent_option(TFLITE_ENABLE_NNAPI_VERBOSE_VALIDATION "Enable NNAPI verbose validation." OFF
-                       "TFLITE_ENABLE_NNAPI" ON)
+option(TFLITE_ENABLE_NNAPI "Enable NNAPI (Android only)." OFF)
+# cmake_dependent_option(TFLITE_ENABLE_NNAPI_VERBOSE_VALIDATION "Enable NNAPI verbose validation." OFF
+                      #  "TFLITE_ENABLE_NNAPI" OFF)
 option(TFLITE_ENABLE_MMAP "Enable MMAP (unsupported on Windows)" ON)
 option(TFLITE_ENABLE_GPU "Enable GPU" OFF)
-option(TFLITE_ENABLE_XNNPACK "Enable XNNPACK backend" ON)
+option(TFLITE_ENABLE_XNNPACK "Enable XNNPACK backend" OFF)
+option(TFLITE_ENABLE_EXTERNAL_DELEGATE "Enable external delegate" ON)
 
 option(TFLITE_KERNEL_TEST "Enable tflite kernel unit test" OFF)
 
@@ -314,6 +315,16 @@ else()
     "${TFLITE_SOURCE_DIR}/nnapi/nnapi_implementation_disabled.cc"
   )
 endif()
+if(TFLITE_ENABLE_EXTERNAL_DELEGATE)
+   populate_tflite_source_vars("delegates/external"
+    TFLITE_DELEGATES_EXTERNAL_SRCS
+    FILTER "(_test_list|_disabled)\\.(cc|h)$"
+   )
+   list(APPEND TFLITE_DELEGATES_EXTERNAL_SRCS
+     ${TFLITE_SOURCE_DIR}/tools/command_line_flags.cc
+   )
+   set(TFLITE_DELEGATES_EXTERNAL_INCL "delegates/external")
+endif()
 if(TFLITE_ENABLE_XNNPACK)
   find_package(fp16_headers REQUIRED)
   find_package(xnnpack REQUIRED)
@@ -378,6 +389,7 @@ endif()
 set(TFLITE_INCLUDE_DIRS
   "${TENSORFLOW_SOURCE_DIR}"
   "${TFLITE_FLATBUFFERS_SCHEMA_DIR}"
+  "${TFLITE_DELEGATES_EXTERNAL_INCL}"
 )
 include_directories(
   BEFORE
@@ -389,6 +401,7 @@ add_library(tensorflow-lite
   ${TFLITE_CORE_API_SRCS}
   ${TFLITE_CORE_SRCS}
   ${TFLITE_C_SRCS}
+  ${TFLITE_DELEGATES_EXTERNAL_SRCS}
   ${TFLITE_DELEGATES_FLEX_SRCS}
   ${TFLITE_DELEGATES_GPU_SRCS}
   ${TFLITE_DELEGATES_NNAPI_SRCS}
@@ -434,6 +447,10 @@ target_link_libraries(tensorflow-lite
     ${TFLITE_TARGET_DEPENDENCIES}
 )
 
+if (ANDROID_TOOLCHAIN)
+    list(APPEND tensorflow-lite log)
+endif()
+
 if (NOT BUILD_SHARED_LIBS)
   list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DTFL_STATIC_LIBRARY_BUILD")
 endif()
diff --git a/tensorflow/lite/c/builtin_op_data.h b/tensorflow/lite/c/builtin_op_data.h
index ed5ac004cbd..8f57e255812 100644
--- a/tensorflow/lite/c/builtin_op_data.h
+++ b/tensorflow/lite/c/builtin_op_data.h
@@ -482,6 +482,13 @@ typedef struct {
   int body_subgraph_index;
 } TfLiteWhileParams;
 
+typedef struct {
+  size_t length;
+  size_t input_count;
+  size_t output_cout;
+  char* binary;
+} TfLiteVsiNpuParams;
+
 typedef struct {
   bool exclusive;
   bool reverse;
diff --git a/tensorflow/lite/examples/label_image/CMakeLists.txt b/tensorflow/lite/examples/label_image/CMakeLists.txt
index 1bf259aad10..ed64afd39b2 100644
--- a/tensorflow/lite/examples/label_image/CMakeLists.txt
+++ b/tensorflow/lite/examples/label_image/CMakeLists.txt
@@ -55,6 +55,11 @@ if(TFLITE_ENABLE_GPU)
   )
 endif()  # TFLITE_ENABLE_GPU
 
+if(TFLITE_ENABLE_EXTERNAL_DELEGATE)
+  list(APPEND TFLITE_LABEL_IMAGE_SRCS
+          ${TFLITE_SOURCE_DIR}/tools/delegates/external_delegate_provider.cc)
+endif()
+
 add_executable(label_image
   EXCLUDE_FROM_ALL
   ${TFLITE_LABEL_IMAGE_SRCS}
diff --git a/tensorflow/lite/kernels/BUILD b/tensorflow/lite/kernels/BUILD
index aa2f1456c19..1aecd5984bc 100644
--- a/tensorflow/lite/kernels/BUILD
+++ b/tensorflow/lite/kernels/BUILD
@@ -571,6 +571,7 @@ BUILTIN_KERNEL_SRCS = [
     "depthwise_conv.cc",
     "dequantize.cc",
     "detection_postprocess.cc",
+    "vsi_npu_precompiled.cc",
     "div.cc",
     "elementwise.cc",
     "embedding_lookup.cc",
diff --git a/tensorflow/lite/kernels/register.cc b/tensorflow/lite/kernels/register.cc
index 3e0520f6903..810bf3aa393 100644
--- a/tensorflow/lite/kernels/register.cc
+++ b/tensorflow/lite/kernels/register.cc
@@ -28,7 +28,7 @@ TfLiteRegistration* Register_NUMERIC_VERIFY();
 TfLiteRegistration* Register_AUDIO_SPECTROGRAM();
 TfLiteRegistration* Register_MFCC();
 TfLiteRegistration* Register_DETECTION_POSTPROCESS();
-
+TfLiteRegistration* Register_VSI_NPU_PRECOMPILED();
 }  // namespace custom
 
 namespace builtin {
@@ -333,6 +333,8 @@ BuiltinOpResolver::BuiltinOpResolver() {
             tflite::ops::custom::Register_AUDIO_SPECTROGRAM());
   AddCustom("TFLite_Detection_PostProcess",
             tflite::ops::custom::Register_DETECTION_POSTPROCESS());
+  AddCustom("vsi-npu",
+            tflite::ops::custom::Register_VSI_NPU_PRECOMPILED());
   // By definition, all of the ops added above are not user-defined ops,
   // since they are supported by BuiltinOpResolver.
   may_directly_contain_user_defined_ops_ = false;
diff --git a/tensorflow/lite/kernels/register_ref.cc b/tensorflow/lite/kernels/register_ref.cc
index 2a91442d352..f8924929977 100644
--- a/tensorflow/lite/kernels/register_ref.cc
+++ b/tensorflow/lite/kernels/register_ref.cc
@@ -29,6 +29,7 @@ TfLiteRegistration* Register_NUMERIC_VERIFY_REF();
 TfLiteRegistration* Register_AUDIO_SPECTROGRAM();
 TfLiteRegistration* Register_MFCC();
 TfLiteRegistration* Register_DETECTION_POSTPROCESS();
+TfLiteRegistration* Register_VSI_NPU_PRECOMPILED();
 
 }  // namespace custom
 
@@ -483,6 +484,8 @@ BuiltinRefOpResolver::BuiltinRefOpResolver() {
             tflite::ops::custom::Register_AUDIO_SPECTROGRAM());
   AddCustom("TFLite_Detection_PostProcess",
             tflite::ops::custom::Register_DETECTION_POSTPROCESS());
+  AddCustom("vsi_npu",
+            tflite::ops::custom::Register_VSI_NPU_PRECOMPILED());
 }
 
 }  // namespace builtin
diff --git a/tensorflow/lite/kernels/vsi_npu_precompiled.cc b/tensorflow/lite/kernels/vsi_npu_precompiled.cc
new file mode 100644
index 00000000000..e62fb4d93f8
--- /dev/null
+++ b/tensorflow/lite/kernels/vsi_npu_precompiled.cc
@@ -0,0 +1,73 @@
+/* Copyright 2018 The TensorFlow Authors. All Rights Reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+==============================================================================*/
+
+#include <math.h>
+#include <stddef.h>
+#include <stdint.h>
+
+#include <vector>
+
+#include "flatbuffers/flexbuffers.h"  // from @flatbuffers
+#include "tensorflow/lite/c/common.h"
+#include "tensorflow/lite/kernels/internal/optimized/optimized_ops.h"
+#include "tensorflow/lite/kernels/internal/reference/reference_ops.h"
+#include "tensorflow/lite/kernels/internal/spectrogram.h"
+#include "tensorflow/lite/kernels/internal/tensor.h"
+#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
+#include "tensorflow/lite/kernels/kernel_util.h"
+
+namespace tflite {
+namespace ops {
+namespace custom {
+namespace vsi_npu {
+
+void* Init(TfLiteContext* context, const char* buffer, size_t length) {
+  TfLiteVsiNpuParams* data = reinterpret_cast<TfLiteVsiNpuParams*>(
+      malloc(sizeof(TfLiteVsiNpuParams) + sizeof(char) * length));
+  data->length = length;
+  data->binary = reinterpret_cast<char*>(data) + sizeof(TfLiteVsiNpuParams);
+  memcpy(reinterpret_cast<char*>(data->binary), buffer, length);
+  return reinterpret_cast<void*>(data);
+}
+
+void Free(TfLiteContext* context, void* buffer) {
+  auto* data = reinterpret_cast<TfLiteVsiNpuParams*>(buffer);
+  delete data;
+}
+
+TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
+  auto* data =
+      reinterpret_cast<TfLiteVsiNpuParams*>(node->user_data);
+  data->input_count = NumInputs(node);
+  data->output_cout = NumOutputs(node);
+  return kTfLiteOk;
+}
+
+TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
+  return kTfLiteOk;
+}
+
+}  // namespace vsi_npu
+
+TfLiteRegistration* Register_VSI_NPU_PRECOMPILED() {
+  static TfLiteRegistration r = {
+      vsi_npu::Init, vsi_npu::Free,
+      vsi_npu::Prepare,vsi_npu::Eval};
+  return &r;
+}
+
+}  // namespace custom
+}  // namespace ops
+}  // namespace tflite
diff --git a/tensorflow/lite/tools/benchmark/CMakeLists.txt b/tensorflow/lite/tools/benchmark/CMakeLists.txt
index 5de9ab30086..07425c82969 100644
--- a/tensorflow/lite/tools/benchmark/CMakeLists.txt
+++ b/tensorflow/lite/tools/benchmark/CMakeLists.txt
@@ -71,6 +71,11 @@ if(TFLITE_ENABLE_GPU)
   )
 endif()  # TFLITE_ENABLE_GPU
 
+if(TFLITE_ENABLE_EXTERNAL_DELEGATE)
+  list(APPEND TFLITE_BENCHMARK_SRCS
+	  ${TFLITE_SOURCE_DIR}/tools/delegates/external_delegate_provider.cc)
+endif()
+
 add_executable(benchmark_model
   EXCLUDE_FROM_ALL
   ${TFLITE_BENCHMARK_SRCS}
